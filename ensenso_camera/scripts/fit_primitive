#!/usr/bin/env python3
import numpy as np
import sys

import ensenso_camera.ros2 as ros2py

from ensenso_camera_msgs.msg import Primitive
from ensenso_camera_msgs.msg import Parameter
from tf import transformations
from visualization_msgs.msg import Marker
from visualization_msgs.msg import MarkerArray

FitPrimitive = ros2py.import_action("ensenso_camera_msgs", "FitPrimitive")
RequestData = ros2py.import_action("ensenso_camera_msgs", "RequestData")
SetParameter = ros2py.import_action("ensenso_camera_msgs", "SetParameter")


def _main(node_name):
    node = ros2py.create_node(node_name, args=sys.argv)

    loop_rate = ros2py.get_param(node, "rate", 1.0)
    parameter_set = ros2py.get_param(node, "parameter_set", "fit_primitive")
    timeout = ros2py.get_param(node, "timeout", 60)

    scaling = ros2py.get_param(node, "scaling", 0.25)
    failure_probability = ros2py.get_param(node, "failure_probability", 1e-6)
    inlier_fraction = ros2py.get_param(node, "inlier_fraction", 0.015)
    inlier_threshold = ros2py.get_param(node, "inlier_threshold", 0.001)
    ransac_iterations = ros2py.get_param(node, "ransac_iterations", 0.0)
    normal_radius = ros2py.get_param(node, "normal_radius", 7.0)

    fit_primitive_client = ros2py.create_action_client(node, "fit_primitive", FitPrimitive)
    set_parameter_client = ros2py.create_action_client(node, "set_parameter", SetParameter)
    request_data_client = ros2py.create_action_client(node, "request_data", RequestData)

    clients = [fit_primitive_client, set_parameter_client, request_data_client]
    ros2py.wait_for_servers(node, clients, timeout_sec=timeout)

    marker_publisher = ros2py.create_publisher(node, MarkerArray, "primitive_markers", queue_size=10)

    parameters = [
        Parameter(key=Parameter.PROJECTOR, bool_value=False),
        Parameter(key=Parameter.FRONT_LIGHT, bool_value=True),
    ]
    set_parameter_goal = SetParameter.Goal(parameter_set=parameter_set, parameters=parameters)
    ros2py.send_action_goal(node, set_parameter_client, set_parameter_goal)

    def main_loop():
        # In order to fit primitives, the point cloud has to be calculated first. Therefore the request_data action has
        # to be called beforehand for obtaining the current point cloud.
        response = ros2py.send_action_goal(node, request_data_client, RequestData.Goal(request_point_cloud=True))

        if not response.successful():
            node.get_logger().warn("Acquiring the point cloud was not successful.")
            return

        # After successfully acquiring the point cloud, we can search and fit primitives.
        # Global parameters.
        goal = FitPrimitive.Goal()
        goal.scaling = scaling
        goal.failure_probability = failure_probability
        goal.inlier_threshold = inlier_threshold
        goal.inlier_fraction = inlier_fraction
        goal.ransac_iterations = ransac_iterations
        goal.normal_radius = normal_radius

        # Sample local input parameters for finding/fitting a plane.
        # They will overwrite the global parameters given above.
        primitive = Primitive()
        primitive.type = Primitive.PLANE
        primitive.inlier_threshold = 0.005
        primitive.count = 3
        primitive.inlier_fraction_in = 0.015

        goal.primitives.append(primitive)

        response = ros2py.send_action_goal(node, fit_primitive_client, goal)
        if not response.successful():
            node.get_logger().warn("No primitive was not found.")
            return

        result = response.get_result()
        if result.error.code != 0:
            node.get_logger().error(ros2py.format_error(result.error, "Error while fitting primitive!"))
            return

        marker_array = MarkerArray()
        marker_id = 0
        for found_primitive in result.primitives:
            if found_primitive.type == Primitive.PLANE:

                # Build the marker for a plane
                marker = Marker()
                marker.header.frame_id = "ensenso_optical_frame"
                marker.header.stamp = node.get_clock().now()
                marker.ns = "fit_primitive"
                marker.id = marker_id
                marker.type = Marker.CUBE
                marker.action = Marker.ADD
                marker.lifetime = ros2py.Duration(1)
                marker.color.a = 1.0
                marker.color.r = 1.0
                marker.color.g = 0.0
                marker.color.b = 0.0

                # Defining the marker scale
                plane_thickness = 0.002
                marker.scale.x = 0.1
                marker.scale.y = 0.1
                marker.scale.z = plane_thickness

                # Defining the marker position
                marker.pose.position.x = found_primitive.center.x
                marker.pose.position.y = found_primitive.center.y
                marker.pose.position.z = found_primitive.center.z

                # Defining the marker orientation from angle axis
                # Source: https://stackoverflow.com/questions/23166898/
                # efficient-way-to-calculate-a-3x3-rotation-matrix-from-the-rotation-defined-by-tw
                z_camera = [0, 0, 1]
                normal_plane = [
                    found_primitive.normal.x,
                    found_primitive.normal.y,
                    found_primitive.normal.z,
                ]
                angle_norm = np.linalg.norm(z_camera) / np.linalg.norm(normal_plane)
                angle = np.arccos(np.dot(z_camera, normal_plane) / angle_norm)
                axis_cross = np.cross(z_camera, normal_plane)
                axis = axis_cross / np.linalg.norm(axis_cross)
                rot_matrix = transformations.rotation_matrix(angle=angle, direction=axis)
                quaternion = transformations.quaternion_from_matrix(rot_matrix)

                marker.pose.orientation.x = quaternion[0]
                marker.pose.orientation.y = quaternion[1]
                marker.pose.orientation.z = quaternion[2]
                marker.pose.orientation.w = quaternion[3]

                # Save the found primitive as marker in a marker array
                marker_array.markers.append(marker)
                marker_id += 1

        node.get_logger().info("Publishing marker array with {} elements.".format(len(marker_array.markers)))
        marker_publisher.publish(marker_array)

    ros2py.execute_at_rate(node, main_loop, loop_rate)


def main():
    ros2py.wrap_main_function(_main, "ensenso_camera_fit_primitive_marker")


if __name__ == "__main__":
    main()
