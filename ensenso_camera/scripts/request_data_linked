#!/usr/bin/env python3
import sys

import ensenso_camera.ros2 as ros2py

RequestData = ros2py.import_action("ensenso_camera_msgs", "RequestData")
RequestDataMono = ros2py.import_action("ensenso_camera_msgs", "RequestDataMono")


def _main(node_name):
    node = ros2py.create_node(node_name, args=sys.argv)

    loop_rate = ros2py.get_param(node, "~rate", 0.5)
    stereo_namespace = ros2py.get_param(node, "stereo_ns", "stereo")
    mono_namespace = ros2py.get_param(node, "mono_ns", "mono")
    timeout = ros2py.get_param(node, "timeout", 60)

    # Use different namespaces in order to prevent duplicate topic names.
    request_stereo_data_client_name = stereo_namespace.rstrip("/") + "/request_data"
    request_mono_data_client_name = mono_namespace.rstrip("/") + "/request_data"

    request_stereo_data_client = ros2py.create_action_client(node, request_stereo_data_client_name, RequestData)
    request_mono_data_client = ros2py.create_action_client(node, request_mono_data_client_name, RequestDataMono)

    clients = [request_stereo_data_client, request_mono_data_client]
    ros2py.wait_for_servers(node, clients, timeout_sec=timeout)

    request_stereo_data_goal = RequestData.Goal()
    request_stereo_data_goal.request_depth_image = True

    request_mono_data_goal = RequestDataMono.Goal()
    request_mono_data_goal.request_rectified_images = True

    goals = [request_stereo_data_goal, request_mono_data_goal]

    def main_loop():
        stereo_response, mono_response = ros2py.send_action_goals(node, clients, goals)

        if not stereo_response.successful():
            node.get_logger().warn("Stereo action was not successful.")

        if not mono_response.successful():
            node.get_logger().warn("Mono action was not successful.")

        stereo_result = stereo_response.get_result()
        if stereo_result.error.code != 0:
            node.get_logger().error(ros2py.format_error(stereo_result.error, "Error while acquiring stereo data!"))
            return

        mono_result = mono_response.get_result()
        if mono_result.error.code != 0:
            node.get_logger().error(ros2py.format_error(mono_result.error, "Error while acquiring mono data!"))
            return

        node.get_logger().info("Data successfully requested.")

    ros2py.execute_at_rate(node, main_loop, loop_rate)


def main():
    ros2py.wrap_main_function(_main, "ensenso_camera_request_data_linked")


if __name__ == "__main__":
    main()
