#!/usr/bin/env python3
import sys

import ensenso_camera.ros2 as ros2py

RequestData = ros2py.import_action("ensenso_camera_msgs", "RequestData")


def _main(node_name):
    node = ros2py.create_node(node_name, args=sys.argv)

    loop_rate = ros2py.get_param(node, "rate", 0.5)
    namespace = ros2py.get_param(node, "namespace", "")
    timeout = ros2py.get_param(node, "timeout", 60)

    goal = RequestData.Goal()
    goal.parameter_set = ros2py.get_param(node, "parameter_set", "")

    goal.request_raw_images = ros2py.get_param(node, "raw_images", True)
    goal.request_rectified_images = ros2py.get_param(node, "rectified_images", True)
    goal.request_disparity_map = ros2py.get_param(node, "disparity_map", True)
    goal.request_depth_image = ros2py.get_param(node, "depth_image", True)
    goal.request_point_cloud = ros2py.get_param(node, "point_cloud", True)
    goal.request_normals = ros2py.get_param(node, "normals", True)

    # By default the data is published and not included in the action response.
    goal.publish_results = True
    goal.include_results_in_response = False

    request_data_client_name = "request_data" if namespace == "" else namespace.rstrip("/") + "/request_data"
    request_data_client = ros2py.create_action_client(node, request_data_client_name, RequestData)

    ros2py.wait_for_server(node, request_data_client, timeout_sec=timeout)

    def main_loop():
        response = ros2py.send_action_goal(node, request_data_client, goal)
        if not response.successful():
            node.get_logger().warn("Action was not successful.")
            return

        result = response.get_result()
        if result.error.code != 0:
            node.get_logger().error(ros2py.format_error(result.error))

        node.get_logger().info("Data successfully requested.")

    ros2py.execute_at_rate(node, main_loop, loop_rate)


def main():
    ros2py.wrap_main_function(_main, "ensenso_camera_request_data")


if __name__ == "__main__":
    main()
